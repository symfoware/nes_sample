ファミコンプログラムメモ
・参考リンク
6502マシン語ゲームプログラミング
https://github.com/suzukiplan/mgp-fc?tab=readme-ov-file

ｷﾞｺ猫でもわかるファミコンプログラミング
http://gikofami.fc2web.com/

NES研究所
https://hp.vector.co.jp/authors/VA042397/nes/6502.html

数値計算の考え方
https://taotao54321.hatenablog.com/entry/2017/04/09/151355

65C816命令表
https://donkeyhacks.zouri.jp/databank/65C816/65c816.html

https://www.nesdev.org/wiki/Nesdev_Wiki


・コメント
;(セミコロン)

・数値の扱い
#をつけると即値となる
%が2進数
$が16進数
なにもなければ10進数

#なしで値を指定するとメモリーアドレスを指定していることになる


・メモリーマップ
$0000～$07FF	RAM（ユーザーが自由に使える）
$0800～$1FFF	RAMのミラー
$2000～$2007	I/Oレジスタ（ここを操作して画面やボタンの入出力操作を行います）
$2008～$3FFF	I/Oレジスタのミラー
$4000～$401F	I/Oレジスタ
$4020～$5FFF	拡張ROM用
$6000～$7FFF	バックアップRAM用
$8000～$BFFF	プログラムROM
$C000～$FFFF	プログラムROM

Bank 0 - $8000番地から始まるプログラムROM領域。ここにプログラムを入れる。
Bank 1 - 割り込みテープル。$FFFA番地から始まる。
Bank 2 - スプライトと背景データを入れるバンク。VRAMの$0000番地から始まる。

VRAM
$0000～$0FFF パターンテーブル０ 
$1000～$1FFF パターンテーブル１ 
$2000～$23BF ネームテーブル 
$23C0～$23FF 属性テーブル 
$2400～$27BF ネームテーブル 
$27C0～$27FF 属性テーブル 
$2800～$2BBF ネームテーブル 
$2BC0～$2BFF 属性テーブル 
$2C00～$2FBF ネームテーブル 
$2FC0～$2FFF 属性テーブル 
$3000～$3EFF $2000-$2EFFのミラー 
$3F00～$3F0F BG用パレット 
$3F10～$3F1F スプライト用パレット 
$3F20～$3FFF パレットミラー 
$4000～$FFFF $0000-$3FFFのミラー 






・レジスタ
a（アキュームレータ）
x（インデックス）
y（インデックス）
p（ステータス）
s（スタックポインタ）
pc（プログラムカウンタ）
pc以外のレジスタは全て8bitで、pcのみ16bitです。


・命令文
LDA メモリの値（または即値）をaへload
STA aの値をメモリへstore
LDX メモリの値（または即値）をxへload
STX xの値をメモリへstore
LDY メモリの値（または即値）をyへload
STY yの値をメモリへstore

TAX aをxへ転送（x = a）
TXA xをaへ転送（a = x）
TAY aをyへ転送（y = a）
TYA yをaへ転送（a = y）
転送方向がどっちだったのかを忘れてしまいバグを作り込むことが割とよくあるため、ニーモニックを正式名称で覚えることをオススメします。

TAX = Transfer a to x (aをxへ転送)
TXA = Transfer x to a (xをaへ転送)
TAY = Transfer a to y (aをyへ転送)
TYA = Transfer y to a (yをaへ転送)
また、あまり使わないと思いますが、xとsの間で値を転送することもできます。

TXS = Transfer x to s (xをsへ転送)
TSX = Transfer s to x (sをxへ転送)

PHA aをスタックへpush
PLA スタックからaへpull(pop)
PHP pをスタックへpush
PLP スタックからpへpull(pop)

JSR : サブルーチンへジャンプする時, 戻りアドレス（2byte）がスタックに push される
RTS : サブルーチンから復帰する時, スタックから戻りアドレス（2byte）が pull される
NMI/IRQ発生した時, P（1byte）と戻りアドレス（2byte）が push される
RTI : 割り込みから復帰する時, P（1byte）と戻りアドレス（2byte）が pull される

ADC 足し算 (Add with carry)
SBC 引き算 (Sub with carry)
ORA 論理和
AND 論理積
EOR 排他的論理和
ASL 左シフト
LSR 右シフト
ROL 左ローテート
ROR 右ローテート
BIT ビット比較
CMP 比較
注意点として、インクリメント（1加算）とデクリメント（1減算）はできません。 また、キャリーを用いない加算と減算も無い点に注意する必要があります。
更に、掛け算（MUL）、割り算（DIV）、剰余算（MOD）といった演算命令はそもそもありません。 それらの演算をしたい場合は、論理演算（ASL, LSR, AND）で代用します。

INX Xをインクリメント
DEX Xをデクリメント
CPX Xを比較
INY Yをインクリメント
DEY Yをデクリメント
CPY Yを比較

BEQ　(Branch Equal)
ゼロフラグが立っているとき、分岐します。分岐先は-128～+127バイト以内になければいけません。

BNE　(Branch Not Equal)
ゼロフラグが立っていないとき、分岐します。分岐先は-128～+127バイト以内になければいけません。

※ゼロフラグ
直前の計算結果を参照できる模様。他にオーバーフローを検出するキャリーフラグがある。






・PPU
$2000 (Basic settings / store only)
PPUの基本設定 を行う書き込み（出力）専用のI/Oポート

V: vBlank発生を割り込みで検出 (0: off, 1: on)
P: PPU type (0: master, 1: slave)
H: スプライトのサイズ (0: 8x8, 1: 8x16)
B: BGのキャラクタテーブル番号 (0: $0000, 1: $1000)
S: スプライトのキャラクタテーブル番号 (0: $0000, 1: $1000)
I: VRAM入出力時のアドレス変化値 (0: +1, 1: +32)
NN: メインスクリーン (00: $2000, 01: $2400, 10: $2800, 11: $2C00)

$2001 (Mask settings / store only)
画面表示の設定 を行う書き込み（出力）専用のI/Oポート
B: 青を強調表示 (0: off, 1: on)
G: 緑を強調表示 (0: off, 1: on)
R: 赤を強調表示 (0: off, 1: on)
S: スプライト表示 (0: off, 1: on)
B: BG表示 (0: off, 1: on)
M: 左端8x8のスプライト表示 (0: off, 1: on)
m: 左端8x8のBG表示 (0: off, 1: on)
C: モノクロ表示 (0: color, 1: mono)


$2002 (Drawing status / load only)
画面描画の状態取得 を行う読み取り（入力）専用のI/Oポート

V: vBlankの発生状態 (0: 描画中, 1: vBlank中)
S: 0番スプライトの描画 (0: 未検出, 1: 検出)
N: 描画ラインのスプライト描画上限 (0: 8以下, 1: 9以上)


$2003~$2004 (Sprite)
スプライトRAM (OAM) への入出力を行うI/Oポート
$2003 への store でスプライトRAM (OAM) のアクセス先アドレスを設定して $2004 への load / store でOAMへの入出力を行いますが このI/Oポートは実用上の理由でほぼ使いません。


$2005 (Window position / store only)
BGのスクリーン表示位置（Window） の設定を行います。
NesDev.comやその他のサイトでは、$2005のことを「スクロール」と呼んでいますが、Window (画面の表示範囲) と覚えた方がわかり易いかと思います。（実現できる機能はスクロールで間違いありませんが）

$2006~$2007 (VRAM access)
VRAM への入出力を行うI/Oポート

usage:

    LDA VRAMアドレス上位1byte
    STA $2006
    LDA VRAMアドレス下位1byte
    STA $2006
    LDA #1
    STA $2007 ; 指定アドレスに1を書き込む
$2006 へ2回 store を行うことでVRAMのアクセス先番地を設定
$2007 へ store で値を書き込む
$2007 から load で値を読み込む
$2007 へのアクセスの都度、アクセス先番地が +1 または +32 される
加算される値は $2000 (Basic settings) の I の値に依存
VRAMへキャラクタを横書きする時は、$2006のstore 1セット(2回)だけで行い、I=0で$2007へ連続storeすれば良いことになります。



.proc label
.procend
これはcc65のマクロ
https://www.cc65.org/doc/ca65-11.html
proc範囲内のラベルがプライベート扱いになるため、ラベルの重複を気にしなくて良くなる


-------------------------------------
・ログ
かんちゃんからマップのチップ対応表を拾っておく
DQ1のマップをサンプルに移動サンプル作成

・追加記事
CHR-RAM
音声に手を出してみる

